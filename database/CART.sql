-- DATA MANIPULATION LANGUAGE
SET SERVEROUTPUT ON;
-- SEPUTAR CARTS
SELECT *
FROM CART;

DELETE 

UPDATE CART SET 
    TOTAL_ITEM = 0,
    TOTAL_PRICE = 0;

SELECT *
FROM CART_ITEM;

DELETE FROM CART_ITEM;

-- melihat keranjang belanja
SELECT * FROM CART_ITEM C
WHERE c.cart_id = (SELECT id from cart c where c.customer_id = 61);

BEGIN
    UPDATE_CART(22);
END;

DECLARE
    X INTEGER := -1;
BEGIN
    X := ADD_TO_CART(22, 23, 100, 'Level 10');
    DBMS_OUTPUT.PUT_LINE(X);
END;

DECLARE
    X INTEGER := -1;
BEGIN
    X := CHECKOUT(74, 10, 1);
    DBMS_OUTPUT.PUT_LINE(X);
END;

SELECT * FROM ORDERS;

SELECT * FROM ORDERS_ITEM;

DELETE FROM ORDERS;

SELECT * FROM INVOICE;

DELETE FROM INVOICE;



---
-- PL SQL PROCEDURE/FUNCTION DECLARATION
---
CREATE OR REPLACE FUNCTION GET_CART_ID(L_CUSTOMER_ID IN INTEGER) RETURN INTEGER
IS
L_RETURN NUMBER;
BEGIN
    SELECT ID INTO L_RETURN
    FROM CART
    WHERE CUSTOMER_ID = L_CUSTOMER_ID;
    
    RETURN L_RETURN;
END;
/

CREATE OR REPLACE PROCEDURE READ_CART(L_CUSTOMER_ID IN INTEGER)
AS
    L_CURSOR SYS_REFCURSOR;
    L_CART_ID INTEGER;
BEGIN
    L_CART_ID  := GET_CART_ID(L_CUSTOMER_ID);
    OPEN L_CURSOR FOR
        SELECT *
        FROM CART
        WHERE ID = L_CART_ID;
        
        DBMS_SQL.RETURN_RESULT(L_CURSOR);      
END;
/

CREATE OR REPLACE PROCEDURE READ_CART_DETAIL(L_CUSTOMER_ID IN INTEGER)
AS
    L_CURSOR SYS_REFCURSOR;
    L_CART_ID INTEGER;
BEGIN
    L_CART_ID  := GET_CART_ID(L_CUSTOMER_ID);
    
    OPEN L_CURSOR FOR
        SELECT CART_ID, PRODUCT_ID, TITLE, DESCRIPTION, PRICE, MERCHANT_ID, QUANTITY, NOTE
        FROM CART_ITEM 
        INNER JOIN PRODUCT ON PRODUCT_ID = PRODUCT.ID
        WHERE CART_ID = L_CART_ID;
        
        DBMS_SQL.RETURN_RESULT(L_CURSOR);      
END;
/

-- PROCEDURE FUNCTION PL/SQL
CREATE OR REPLACE PROCEDURE UPDATE_CART(L_CUSTOMER_ID IN INTEGER)
IS
L_CART_ID NUMBER;
BEGIN
    L_CART_ID := GET_CART_ID(L_CUSTOMER_ID);
    
    FOR ITEM IN (SELECT * FROM CART_ITEM INNER JOIN PRODUCT ON CART_ITEM.PRODUCT_ID = PRODUCT.ID WHERE CART_ITEM.CART_ID = L_CART_ID) LOOP
        IF ITEM.STOCK = 0 THEN
            DELETE FROM CART_ITEM
            WHERE PRODUCT_ID = ITEM.ID AND CART_ID = ITEM.CART_ID;
        ELSIF ITEM.QUANTITY > ITEM.STOCK THEN
            UPDATE CART_ITEM SET 
                QUANTITY = ITEM.STOCK
            WHERE CART_ITEM.CART_ID = ITEM.CART_ID;
        END IF;
    END LOOP;
END;
/

-- PROCEDURE UNTUK MENAMBAH KE CART
create or replace FUNCTION ADD_TO_CART(L_CUSTOMER_ID IN INTEGER, L_PRODUCT_ID IN INTEGER, L_QUANTITY IN OUT INTEGER, L_NOTE IN STRING) RETURN INTEGER
AS
L_STOCK INTEGER;
L_CART_ID CART.ID%TYPE;
BEGIN
    -- check stock produk
    L_STOCK := GET_STOCK_PRODUCT(L_PRODUCT_ID);

    IF L_STOCK < 1 THEN
        RETURN 1;
    ELSIF L_QUANTITY > L_STOCK THEN
        L_QUANTITY := L_STOCK;
    END IF;

    L_CART_ID := GET_CART_ID(L_CUSTOMER_ID);

    INSERT INTO CART_ITEM(CART_ID, PRODUCT_ID, QUANTITY, NOTE)
    VALUES(L_CART_ID, L_PRODUCT_ID, L_QUANTITY, L_NOTE);

    RETURN 0;
    
    EXCEPTION
        -- jika sudah ada produk di keranjang, increment saja
        WHEN DUP_VAL_ON_INDEX THEN
        UPDATE CART_ITEM SET 
            QUANTITY = QUANTITY + L_QUANTITY,
            NOTE = L_NOTE
            WHERE ((CART_ID = L_CART_ID) AND (PRODUCT_ID = L_PRODUCT_ID));
        RETURN 0;
END;
/

create or replace FUNCTION UPDATE_CART_ITEM(L_CUSTOMER_ID IN INTEGER, L_PRODUCT_ID IN INTEGER, L_QUANTITY IN OUT INTEGER, L_NOTE IN STRING) RETURN INTEGER
AS
L_STOCK INTEGER;
L_CART_ID CART.ID%TYPE;
BEGIN
    -- check stock produk
    L_STOCK := GET_STOCK_PRODUCT(L_PRODUCT_ID);

    IF L_STOCK < 1 THEN
        RETURN 1;
    ELSIF L_QUANTITY > L_STOCK THEN
        L_QUANTITY := L_STOCK;
    END IF;

    L_CART_ID := GET_CART_ID(L_CUSTOMER_ID);
    
    UPDATE CART_ITEM SET 
        QUANTITY = L_QUANTITY,
        NOTE = L_NOTE
        WHERE ((CART_ID = L_CART_ID) AND (PRODUCT_ID = L_PRODUCT_ID));
    RETURN 0;
    
    EXCEPTION 
        WHEN OTHERS THEN
            RETURN 1;
END;
/

CREATE OR REPLACE FUNCTION DELETE_CART_ITEM(L_CUSTOMER_ID IN INTEGER, L_PRODUCT_ID IN INTEGER) RETURN INTEGER
IS
L_CART_ID NUMBER;
BEGIN
    L_CART_ID := GET_CART_ID(L_CUSTOMER_ID);
    
    DELETE FROM CART_ITEM
    WHERE CART_ID = L_CART_ID AND PRODUCT_ID = L_PRODUCT_ID;
    
    RETURN SQL%ROWCOUNT;
END;

-- CHECKOUT PROCEDURE
create or replace FUNCTION CHECKOUT(L_CUSTOMER_ID IN INTEGER, L_NO_TABLE IN INTEGER, L_PAYMENT_ID IN INTEGER)RETURN INTEGER
IS
L_FLAG INTEGER;
L_CART_ID NUMBER;
L_PRICE NUMBER;
L_CURRENT NUMBER;
BEGIN
    -- JOIN TABLE
    -- DISTICNT
    -- LOOP -> MASUKIN ORDER
    L_CART_ID := GET_CART_ID(L_CUSTOMER_ID);
    
    SAVEPOINT TRY_AGAIN;
    
    UPDATE_CART(L_CUSTOMER_ID);
    
    SELECT TOTAL_ITEM INTO L_FLAG
    FROM CART
    WHERE ID = L_CART_ID;
    
    -- Jika cart kosong kembalikan
    IF L_FLAG = 0 THEN
        RETURN 1;
    END IF;
    
    -- 
    
    INSERT INTO INVOICE(ID, STATUS, BILL, FEE, CUSTOMER_ID, PAYMENT_ID)
    VALUES (INVOICE_SEQ.NEXTVAL, 0, 0, 0.1, L_CUSTOMER_ID, L_PAYMENT_ID);

    FOR L_MERCHANT IN (SELECT DISTINCT MERCHANT_ID FROM (SELECT MERCHANT_ID FROM (SELECT * FROM CART_ITEM WHERE CART_ID = L_CART_ID) L_CART_ITEM INNER JOIN PRODUCT ON PRODUCT.ID = L_CART_ITEM.PRODUCT_ID)) LOOP
        INSERT INTO ORDERS(ID, STATUS, TOTAL_ITEM, TOTAL_PRICE, CUSTOMER_ID, MERCHANT_ID, INVOICE_ID)
        VALUES(ORDER_SEQ.NEXTVAL, 0, 0, 0, L_CUSTOMER_ID, L_MERCHANT.MERCHANT_ID, INVOICE_SEQ.CURRVAL);

        FOR ITEM IN (SELECT * FROM (SELECT * FROM CART_ITEM WHERE CART_ID = L_CART_ID) L_CART_ITEM INNER JOIN PRODUCT ON PRODUCT.ID = L_CART_ITEM.PRODUCT_ID WHERE MERCHANT_ID = L_MERCHANT.MERCHANT_ID) LOOP
            INSERT INTO ORDERS_ITEM(PRODUCT_ID, ORDERS_ID, QUANTITY, NOTE)
            VALUES(ITEM.PRODUCT_ID, ORDER_SEQ.CURRVAL, ITEM.QUANTITY, ITEM.NOTE);
            
        END LOOP;
    END LOOP;
    
    RETURN 0;
    EXCEPTION 
        WHEN OTHERS THEN
            ROLLBACK TO TRY_AGAIN;
END;
/




    

    


