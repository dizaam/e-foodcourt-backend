-- DATA MANIPULATION LANGUAGE
SET SERVEROUTPUT ON;
--SEPUTAR PRODUCTS
SELECT *
FROM PRODUCT;

INSERT INTO PRODUCT (ID, DESCRIPTION, TITLE, PRICE, IMAGE_URL, STOCK, MERCHANT_ID)
VALUES(NULL, 'Seblak super pedes', 'Seblak Gila', 15000, 'google.com', 10, 21);

DELETE FROM PRODUCT WHERE ID = 121;

UPDATE PRODUCT SET
    STOCK = 100;
    
    
DECLARE
    X INTEGER := -10;
BEGIN
    X := ADD_NEW_PRODUCT('Ramyeon', 'Mie kuah ala Korea', 20000, 100, 'google.com', 21, 21);
    DBMS_OUTPUT.PUT_LINE('X: ' ||  X);
END;

BEGIN
    UPDATE_PRODUCT(21, 'Seblak Terserah', 'Terserah kamu gimana', 20000, 100, 'google.com', 2);
END;



---
-- PL SQL PROCEDURE/FUNCTION DECLARATION
---
CREATE OR REPLACE PROCEDURE READ_ALL_PRODUCT IS
    L_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN L_CURSOR FOR
        SELECT *
        FROM PRODUCT
        ORDER BY ID;
        
    DBMS_SQL.RETURN_RESULT(L_CURSOR);
END;
/

CREATE OR REPLACE PROCEDURE READ_AVAILABLE_PRODUCT IS
    L_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN L_CURSOR FOR
        SELECT PRODUCT.ID, TITLE, DESCRIPTION, IMAGE_URL, PRICE, STOCK, MERCHANT_ID
        FROM PRODUCT
        INNER JOIN MERCHANT ON MERCHANT_ID = MERCHANT.ID
        WHERE MERCHANT.STATUS = 1 AND STOCK > 0;
        
        DBMS_SQL.RETURN_RESULT(L_CURSOR);      
END;
/

CREATE OR REPLACE PROCEDURE READ_PRODUCT_BYCATEGORY(L_CATEGORY_ID IN ARRAY_OF_INTEGER) IS
    L_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN L_CURSOR FOR
        SELECT *
        FROM PRODUCT
        WHERE ID IN (SELECT DISTINCT ID
            FROM PRODUCT
            INNER JOIN PRODUCT_CATEGORY ON PRODUCT.ID = PRODUCT_ID
            WHERE CATEGORY_ID IN (SELECT * FROM TABLE(L_CATEGORY_ID)));
        
        DBMS_SQL.RETURN_RESULT(L_CURSOR);      
END;
/

CREATE OR REPLACE FUNCTION GET_STOCK_PRODUCT(L_PRODUCT_ID IN INTEGER) RETURN INTEGER
AS
L_STOCK INTEGER;
BEGIN
    SELECT STOCK INTO L_STOCK 
    FROM PRODUCT
    WHERE ID = L_PRODUCT_ID;

    RETURN L_STOCK;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN -1;
END;
/

create or replace FUNCTION CREATE_PRODUCT(L_PRODUCT_ID OUT INTEGER, L_TITLE IN STRING, L_DESCRIPTION IN CLOB, L_PRICE IN INTEGER, L_STOCK IN INTEGER, L_IMAGE_URL IN CLOB, L_MERCHANT_ID IN INTEGER) RETURN INTEGER
AS
L_FLAG INTEGER;
BEGIN
    
    SELECT ID INTO L_FLAG
    FROM PRODUCT
    WHERE LOWER(TITLE) = LOWER(L_TITLE) AND MERCHANT_ID = L_MERCHANT_ID;
    
    RETURN 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            INSERT INTO PRODUCT (ID, TITLE, DESCRIPTION, PRICE, STOCK, IMAGE_URL, MERCHANT_ID)
            VALUES(PRODUCT_SEQ.NEXTVAL, L_TITLE, L_DESCRIPTION, L_PRICE, L_STOCK, L_IMAGE_URL, L_MERCHANT_ID);
            L_PRODUCT_ID := PRODUCT_SEQ.CURRVAL;
            RETURN 0;        
END;
/

CREATE OR REPLACE FUNCTION UPDATE_PRODUCT(L_ID IN INTEGER, L_TITLE IN STRING, L_DESCRIPTION IN STRING, L_PRICE IN INTEGER, L_STOCK IN INTEGER, L_IMAGE_URL IN STRING, L_MERCHANT_ID IN INTEGER) RETURN INTEGER
AS
L_PRODUCT PRODUCT%ROWTYPE;
BEGIN
    SELECT * INTO L_PRODUCT
    FROM PRODUCT
    WHERE LOWER(TITLE) = LOWER(L_TITLE) AND ID != L_ID AND MERCHANT_ID = L_MERCHANT_ID;
    
    RETURN 1;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
        UPDATE PRODUCT SET
            TITLE = L_TITLE,
            DESCRIPTION = L_DESCRIPTION,
            PRICE = L_PRICE,
            STOCK = L_STOCK,
            IMAGE_URL = L_IMAGE_URL,
            UPDATED_AT = SYSDATE
        WHERE ID = L_ID;
        RETURN 0;
END;
/


    


