-- DATA MANIPULATION LANGUAGE
SET SERVEROUTPUT ON;
--SEPUTAR CUSTOMER
SELECT *
FROM CUSTOMER;


INSERT INTO CUSTOMER(ID, EMAIL, USERNAME, PASSWORD, PHONE)
VALUES (null, 'WOTT@gmail.com', 'WOTT', 'passwd', '42343');

DELETE FROM CUSTOMER WHERE CUSTOMER.ID = 21;

CREATE OR REPLACE FUNCTION CREATE_NEW_CUSTOMER(L_EMAIL IN STRING, L_USERNAME IN STRING, L_PASSWORD IN STRING, L_PHONE IN STRING) RETURN NUMBER
AS
BEGIN

    INSERT INTO CUSTOMER(ID, EMAIL, USERNAME, PASSWORD, PHONE)
    VALUES (NULL, LOWER(L_EMAIL), L_USERNAME, L_PASSWORD, L_PHONE);
    
    RETURN 0;
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            RETURN 1;
END;

CREATE OR REPLACE FUNCTION AUTHENTICATE_CUSTOMER(L_UNAMEMAIL IN STRING, L_PASSWORD IN STRING, L_ID OUT NUMBER) RETURN NUMBER
AS
L_CUSTOMER CUSTOMER%ROWTYPE;
BEGIN
    SELECT * INTO L_CUSTOMER
    FROM CUSTOMER C 
    WHERE (C.EMAIL = L_UNAMEMAIL OR C.USERNAME = L_UNAMEMAIL) AND C.PASSWORD = L_PASSWORD;
    
    L_ID := L_CUSTOMER.ID;

    RETURN 0;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 1;
END;

DECLARE
    X INTEGER := -1;
BEGIN
--    X := CREATE_NEW_CUSTOMER('ranjau@gmail.com', 'ranj', 'qwerty', '0821231
    X := AUTHENTICATE_CUSTOMER('abadul1', '123');
    DBMS_OUTPUT.PUT_LINE('X: ' || X);
END;

BEGIN
END;

-- SEPUTAR CARTS
SELECT *
FROM CART;

UPDATE CART SET 
    TOTAL_ITEM = 0,
    TOTAL_PRICE = 0;

SELECT *
FROM CART_ITEM;

-- melihat keranjang belanja
SELECT * FROM CART_ITEM C
WHERE c.cart_id = (SELECT id from cart c where c.customer_id = 61);

CREATE OR REPLACE FUNCTION GET_CART_ID(L_CUSTOMER_ID IN INTEGER) RETURN INTEGER
IS
L_RETURN NUMBER;
BEGIN
    SELECT ID INTO L_RETURN
    FROM CART
    WHERE CUSTOMER_ID = L_CUSTOMER_ID;
    
    RETURN L_RETURN;
END;
    

-- PROCEDURE FUNCTION PL/SQL
CREATE OR REPLACE PROCEDURE UPDATE_CART(L_CUSTOMER_ID IN INTEGER)
IS
L_CART_ID NUMBER;
L_PRODUCT_STOCK NUMBER;
BEGIN
    L_CART_ID := GET_CART_ID(L_CUSTOMER_ID);
    
    FOR ITEM IN (SELECT * FROM CART_ITEM WHERE CART_ITEM.CART_ID = L_CART_ID) LOOP
        SELECT STOCK INTO L_PRODUCT_STOCK
        FROM PRODUCT
        WHERE ID = ITEM.PRODUCT_ID;
        
        IF ITEM.QUANTITY > L_PRODUCT_STOCK THEN
            UPDATE CART_ITEM 
                SET QUANTITY = L_PRODUCT_STOCK
                WHERE CART_ITEM.CART_ID = ITEM.CART_ID;
        END IF;
    END LOOP;
END;

BEGIN
    UPDATE_CART(2);
END;

-- PROCEDURE UNTUK MENAMBAH KE CART
create or replace PROCEDURE ADD_TO_CART(L_CUSTOMER_ID IN INTEGER, L_PRODUCT_ID IN INTEGER, L_QUANTITY IN INTEGER)
IS
L_CART_ID CART.ID%TYPE;
BEGIN
    SELECT ID INTO L_CART_ID
    FROM CART
    WHERE CART.customer_id = L_CUSTOMER_ID;

    INSERT INTO CART_ITEM(CART_ID, PRODUCT_ID, QUANTITY)
    VALUES(L_CART_ID, L_PRODUCT_ID, L_QUANTITY);
    
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
        UPDATE CART_ITEM SET 
            QUANTITY = QUANTITY + L_QUANTITY
            WHERE ((CART_ID = L_CART_ID) AND (PRODUCT_ID = L_PRODUCT_ID));
END;

BEGIN
    ADD_TO_CART(2, 1, 1);
END;

-- ORDERS & PAYMENT
SELECT * FROM PAYMENT;

INSERT INTO PAYMENT(ID, METHOD, ACC_NUMBER)
VALUES (NULL, 'GOPAY', '082317900923');

-- procedure checkout
create or replace PROCEDURE CHECKOUT(L_CUSTOMER_ID IN NUMBER, L_NO_TABLE IN NUMBER, L_PAYMENT_ID IN NUMBER)
IS
L_CART_ID NUMBER;
L_PRICE NUMBER;
L_CURRENT NUMBER;
BEGIN
    -- JOIN TABLE
    -- DISTICNT
    -- LOOP -> MASUKIN ORDER
    SELECT ID INTO L_CART_ID
    FROM CART
    WHERE CART.customer_id = L_CUSTOMER_ID;
    
    INSERT INTO INVOICE(ID, STATUS, BILL, FEE, CUSTOMER_ID, PAYMENT_ID)
    VALUES (INVOICE_SEQ.NEXTVAL, 0, 0, 0.1, L_CUSTOMER_ID, L_PAYMENT_ID);

    FOR L_MERCHANT IN (SELECT DISTINCT MERCHANT_ID FROM (SELECT MERCHANT_ID FROM (SELECT * FROM CART_ITEM WHERE CART_ID = L_CART_ID) L_CART_ITEM INNER JOIN PRODUCT ON PRODUCT.ID = L_CART_ITEM.PRODUCT_ID)) LOOP
        INSERT INTO ORDERS(ID, STATUS, TOTAL_ITEM, TOTAL_PRICE, CUSTOMER_ID, MERCHANT_ID, INVOICE_ID)
        VALUES(ORDER_SEQ.NEXTVAL, 0, 0, 0, L_CUSTOMER_ID, L_MERCHANT.MERCHANT_ID, INVOICE_SEQ.CURRVAL);

        FOR ITEM IN (SELECT * FROM (SELECT * FROM CART_ITEM WHERE CART_ID = L_CART_ID) L_CART_ITEM INNER JOIN PRODUCT ON PRODUCT.ID = L_CART_ITEM.PRODUCT_ID WHERE MERCHANT_ID = L_MERCHANT.MERCHANT_ID) LOOP
            INSERT INTO ORDERS_ITEM(PRODUCT_ID, ORDERS_ID, QUANTITY)
            VALUES(ITEM.PRODUCT_ID, ORDER_SEQ.CURRVAL, ITEM.QUANTITY);
            
        END LOOP;
    END LOOP;
END;

BEGIN
    CHECKOUT(2, 10, 1);
END;

SELECT * FROM ORDERS;

SELECT * FROM ORDERS_ITEM;

DELETE FROM ORDERS;

SELECT * FROM INVOICE;

DELETE FROM INVOICE;




    

    


